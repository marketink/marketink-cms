
const step = 0.25;
const max = 10;
const min = 0;
const pixelsPerStep = 20;

let isDragging = false;
let startX = 0;
let currentLeft = 0;
let currentValue = 0;

function rulerRunner() {
    const $ruler = $('#ruler');

    for (let i = 0; i <= max; i += step) {
        const tickClass = (i % 1 === 0) ? 'big' : 'small';
        const tick = $('<div>')
            .addClass('tick')
            .addClass(tickClass)
            .attr('data-value', i);
        $ruler.append(tick);
    }

    const centerX = $('#ruler-wrapper').width() / 2;
    const maxOffset = max / step * pixelsPerStep;

    function updateValue(val) {
        currentValue = Math.min(max, Math.max(min, val));
        $('#selectedValue').text(currentValue.toFixed(2));
        runRuler(val)
        var valFix = (Number(currentValue)).toString();
        valFix = valFix.split('.')
        valFix = valFix[0];
        $('#curtain-width').val(val)
        $('.tick.big').removeClass('outdor');
        $(`.tick.big[data-value="${valFix}"]`).addClass('outdor');
    }

    function setRulerPositionByValue(val) {
        const offset = val / step * pixelsPerStep;
        const left = centerX - offset;
        $ruler.css('left', `${left}px`);
        updateValue(val);
    }

    function setRulerPosition(x) {
        const minLeft = -maxOffset + centerX;
        const maxLeft = centerX;
        const newLeft = Math.min(maxLeft, Math.max(minLeft, x));
        $ruler.css('left', newLeft + 'px');

        const offset = -newLeft + centerX;
        const index = Math.round(offset / pixelsPerStep);
        updateValue(index * step);
    }

    function onMove(e) {
        if (!isDragging) return;
        const clientX = e.type.includes('touch') ? e.touches[0].clientX : e.clientX;
        const dx = clientX - startX;
        setRulerPosition(currentLeft + dx);
    }

    $('#ruler-wrapper')
        .on('mousedown touchstart', function (e) {
            isDragging = true;
            startX = e.type.includes('touch') ? e.touches[0].clientX : e.clientX;
            currentLeft = parseFloat($ruler.css('left')) || 0;
        })
        .on('mousemove touchmove', onMove)
        .on('mouseup touchend mouseleave touchcancel', function () {
            isDragging = false;
        });

    $('#increase').on('click', function () {
        setRulerPositionByValue(currentValue + step);
    });

    $('#decrease').on('click', function () {
        setRulerPositionByValue(currentValue - step);
    });

    setRulerPositionByValue(0);

    $(document).on('click', '.ruler-button', function () {
        if ($(this).hasClass('add')) {
            var res = Number($('#curtain-width').val()) + 0.25;
        } else {
            var res = Number($('#curtain-width').val()) - 0.25;
        }

        if (res < 0) {
            res = 0;
        }

        if (res > 10) {
            res = 10;
        }

        $('#curtain-width').val(res)
        setRulerPositionByValue(res)
    })
}

function runRuler(value) {
    $('#curtain-width-label').html(toMeterCentimeter(value))
}

function toMeterCentimeter(value) {
    const meters = Math.floor(value);
    const centimeters = Math.round((value - meters) * 100);

    if (meters > 0 && centimeters > 0) {
        return `${meters} متر و ${centimeters} سانتی‌متر`;
    } else if (meters > 0) {
        return `${meters} متر`;
    } else {
        return `${centimeters} سانتی‌متر`;
    }
}

function runStepClick(step, self) {
    var width = $('#curtain-width').val();
    if (step == 1) {
        if (width > 0) {
            self.removeClass('no')
        } else {
            self.addClass('no')
        }
        $('.kind-side').hide();
        $('.kind-side').each(function () {
            var elm = $(this);
            var from = Number(elm.attr('from'));
            var widthTo = (width * 100);
            if (widthTo >= from) {
                elm.show()
            }
        });
    }

    if (step == 2) {
        var side = Number($('[name="from"]:checked').val());
        if (side) {
            if (self.hasClass('dropdown')) {
                self.addClass('wait')
                self.removeClass('no')
            } else {
                self.removeClass('wait')
                self.removeClass('no')
            }
        } else {
            self.addClass('no')
        }
    }

    if (step == 3) {
        var partDisabled = "";
        self.removeClass("no");
        $('.curtain-part').each(function () {
            if (!Number($(this).attr('value'))) {
                partDisabled = "no";
            }
        });
        self.addClass(partDisabled);
    }
}

function pardePreview() {
    var metric = 50;
    var width = $('#curtain-width').val();
    width = width * 100;
    if ($('.chin.active').length > 0) {
        if ($('.chin.active').attr('value') == "1") {
            metric = 70;
        }
    }
    var count = Math.ceil(width / metric);

    var side = Number($('[name="from"]:checked').val());

    if (side == 1) {

    }
    $('.parde-preview').empty();

    const type = side;
    const parts = count;
    const container = $('.parde-preview')[0];
    container.innerHTML = '';

    for (let i = 0; i < parts; i++) {
        const div = document.createElement('div');
        div.classList.add('curtain-part');

        switch (type) {
            case 1:
                if (i === 0) div.classList.add('kenareh');
                else div.classList.add('harir');
                break;
            case 2:
                if (i === 0 || i === parts - 1) div.classList.add('kenareh');
                else div.classList.add('harir');
                break;
            case 3:
                div.classList.add('kenareh');
                break;
            case 4:
                div.classList.add('harir');
                break;
            case 5:
                if (i < 2 || i >= parts - 2) div.classList.add('kenareh');
                else div.classList.add('harir');
                break;
        }

        var title = div.classList.contains('kenareh') ? 'کناره' : 'حریر';
        var typeCategory = div.classList.contains('kenareh') ? kenarehs : harirs;
        div.innerHTML = `
                <div class="box-opener w-100 h-100">
                    <div class="box-opener-header w-100 h-100">
                        ${title}
                    </div>
                    <ul class="box-opener-lists" style="display:none">
                        <div>
                            ${renderPoducts(typeCategory, true)}
                        </div>
                    </ul>
                </div>
        `;
        container.appendChild(div);
    }

}


$(document).on('click', '[name="dookht-type"]', function () {
    const elm = $('[name="dookht-type"]:checked');
    const value = Number(elm.val());
    $('.curtain-height').addClass('hidden')
    if (value == 2 || value == 3) {
        $('.curtain-height').removeClass('hidden')
    }

    $('.tool-panch').addClass('hidden')
    $('.tool-minimal').addClass('hidden')
    if (value == 1 || value == 3) {
        $('.tool-panch').removeClass('hidden')
    }
    if (value == 2) {
        $('.tool-minimal').removeClass('hidden')
    }
    addToCart();
});

$(document).on('input', '#height,#length', function () {
    addToCart();
});

$(document).on('click', '[name="rod-length-type"]', function () {
    const elm = $('[name="rod-length-type"]:checked');
    const value = elm.val();
    $('.curtain-length').addClass('hidden')
    if (Number(value) == 1) {
        $('.curtain-length').removeClass('hidden')
    }
    addToCart();
})

$(document).on('click', '[name="curtain-tool"]', function () {
    const elm = $('[name="curtain-tool"]:checked');
    const value = elm.val();
    $('.curtain-length-box').addClass('hidden')
    if (Number(value) > 0) {
        $('.curtain-length-box').removeClass('hidden')
    }
    addToCart();
})

$(document).on('click', '.cats-cord a', function () {
    var href = $(this).attr('href');
    window.open(href, "_blank");
})

$(document).on('click', '.curtain-part', function (e) {
    $('.box-opener-lists').hide()
    $(this).find('.box-opener-lists').show();
})

$(document).on('click', '.choose-product', function () {
    var self = this;
    setTimeout(function(){
        $('.box-opener-lists').hide();
        var elm = $(self);
        var parent = elm.parents('.curtain-part');
        var id = elm.attr('value');
        var type = parent.hasClass('harir') ? 'harir' : 'kenareh';
        var product = products.find(e => e.id == id);
        if (type == "kenareh") {
            parent.attr('value', id);
            parent.css('background-image', `url(${product.info.vector})`)
        }
        else {
            $('.harir').attr('value', id);
            $('.harir').css('background-image', `url(${product.info.vector})`)
        }
    }, 300);
})

$(document).on('click', '.chin', function () {
    $('.chin').removeClass('active');
    $(this).addClass('active');
});

$(document).on('click', '[name="from"]', function () {
    var self = $('.next-wizard[step="2"]');
    var side = Number($('[name="from"]:checked').val());
    self.removeClass('dropdown');
    self.find('.dropdown-do-toggle').attr('data-bs-toggle', "").removeClass('dropdown-toggle')
    self.find('.dropdown-menu').addClass('hidden')
    if (side == 3) {
        self.addClass('dropdown');
        self.find('.dropdown-do-toggle').attr('data-bs-toggle', "dropdown").addClass('dropdown-toggle')
        self.find('.dropdown-menu').removeClass('hidden')
    }
    $('.chin').removeClass('active');
})

$(document).ready(function () {
    var tooltipTriggerList = [].slice.call(
        document.querySelectorAll('[data-bs-toggle="tooltip"]')
    );
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    $(".next").click(function () {

        if (!logined) {
            return window.location.href = '/login';
        }
        if (!verified) {
            return window.location.href = '/profile';
        }

        $('.wizard-error').addClass('hidden');
        runStepClick($(this).attr('step'), $(this));

        if ($(this).attr('step') == 4) {
            addToCart()
        }

        if ($(this).hasClass('no')) {
            $('.wizard-error').html($(this).attr('error'));
            return $('.wizard-error').removeClass('hidden');
        }
        if ($(this).hasClass('wait')) {
            return true;
        }

        if ($(this).attr('step') == 2) {
            pardePreview();
        }

        if ($(this).attr('step') == 4) {
            submitCart()
        } else {
            const nextTabLinkEl = $(".nav-tabs .active")
                .closest("li")
                .next("li")
                .find("a")[0];
            const nextTab = new bootstrap.Tab(nextTabLinkEl);
            nextTab.show();
        }

    });

    $(".previous").click(function () {
        $('.wizard-error').addClass('hidden')
        const prevTabLinkEl = $(".nav-tabs .active")
            .closest("li")
            .prev("li")
            .find("a")[0];
        const prevTab = new bootstrap.Tab(prevTabLinkEl);
        prevTab.show();
    });
});

$(document).on('input', 'input[type="int"], input[type="mobile"]', function () {
    var val = this.value;
    val = val.replace(/[۰۱۲۳۴۵۶۷۸۹]/g, function (d) { return d.charCodeAt(0) - 1776; })
    val2 = val.replace(/[٠١٢٣٤٥٦٧٨٩]/g, function (d) { return d.charCodeAt(0) - 1632; }).replace(/[۰۱۲۳۴۵۶۷۸۹]/g, function (d) { return d.charCodeAt(0) - 1776; });
    this.value = val2;
    this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1');
    var name = $(this).attr('name');
    if (name == "price") {
        let val = $(this).val().replace(/,/g, '');
        if (!/^\d*$/.test(val)) return;
        $(this).val(Number(val).toLocaleString('en-US'));
    }
});

var lazyLoadInstance = new LazyLoad({
    elements_selector: ".lazy"
});

$(document).on('click', '[href="#order"]', function () {
    $('.order-button').click()
})

$(document).on('click', '[data-bs-target="#offcanvasRight"]', function () {
    var elm = $('#ruler-runner');
    if (!elm.hasClass('acted')) {
        elm.addClass('acted');
        elm.html(`<div id="ruler-wrapper"><div id="indicator"></div><div id="ruler"></div></div>`);
        rulerRunner();
        const sideBox = $('#set-sides');
        for (var side of sides) {
            sideBox.append(`
             <div class="col kind-side" from="${side.from}">
                 <div class="card card-product">
                     <label class="card-body">
                         <div class="text-center position-relative">
                             <img src="${side.image}?v=1"
                                 class="mb-3 img-fluid h-auto"
                                 alt="${side.name}"
                                 title="${side.name}" />
                         </div>
                         <h2 class="fs-6">
                             <div class="text-inherit text-decoration-none">${side.name}</div>
                         </h2>
                         <div class="d-flex justify-content-between align-items-center mt-3">
                             <div>
                                 <small class="text-dark font-weight-300">${side.name}</small>
                             </div>
                             <div>
                                 <input type="radio" name="from" value="${side.value}" />
                             </div>
                         </div>
                     </label>
                 </div>
             </div>
            `);
        }
    }
})








const monthNames = [
    "فروردین", "اردیبهشت", "خرداد", "تیر",
    "مرداد", "شهریور", "مهر", "آبان",
    "آذر", "دی", "بهمن", "اسفند"
];

const today = new Date();
const todayJ = jalaali.toJalaali(today.getFullYear(), today.getMonth() + 1, today.getDate());

let selectedDateKey = null;

const deliveryIntervals = [
    { from: "09:00", to: "12:00" },
    { from: "12:00", to: "15:00" },
    { from: "15:00", to: "18:00" },
    { from: "18:00", to: "21:00" }
];

$(document).ready(function () {
    const $year = $('#yearSelector');
    const $month = $('#monthSelector');
    const $body = $('#calendarBody');
    const $hour = $('#deliveryHour');
    const $result = $('#deliveryResult');
    const $hidden = $('#deliveryDateInput');

    for (let y = todayJ.jy; y <= todayJ.jy + 1; y++) {
        $year.append(`<option value="${y}">${y}</option>`);
    }

    for (let m = 1; m <= 12; m++) {
        $month.append(`<option value="${m}">${monthNames[m - 1]}</option>`);
    }

    $year.val(todayJ.jy);
    $month.val(todayJ.jm);

    deliveryIntervals.forEach(({ from, to }) => {
        $hour.append(`<option value="${from} - ${to}">${from} - ${to}</option>`);
    });

    $hour.on('change', updateResult);

    function updateResult() {
        const hour = $hour.val();
        if (selectedDateKey && hour) {
            const full = `${selectedDateKey} ${hour}`;
            $result.text(`زمان ارسال انتخاب‌شده: ${full}`);
            $hidden.val(full);
        }
    }

    function formatDateKey(g) {
        return `${g.gy}-${String(g.gm).padStart(2, '0')}-${String(g.gd).padStart(2, '0')}`;
    }

    function generateCalendar(year, month) {
        const gFirst = jalaali.toGregorian(year, month, 1);
        const startDate = new Date(gFirst.gy, gFirst.gm - 1, gFirst.gd);
        const firstWeekday = (startDate.getDay() + 1) % 7;
        const isLeap = jalaali.isLeapJalaaliYear(year);
        const daysInMonth = month <= 6 ? 31 : (month <= 11 ? 30 : (isLeap ? 30 : 29));

        $body.empty();
        let row = $('<tr></tr>');
        for (let i = 0; i < firstWeekday; i++) {
            row.append('<td class="empty"></td>');
        }

        for (let d = 1; d <= daysInMonth; d++) {
            const g = jalaali.toGregorian(year, month, d);
            const date = new Date(g.gy, g.gm - 1, g.gd);
            const weekDay = (date.getDay() + 1) % 7;
            const isPast = date < new Date(today.getFullYear(), today.getMonth(), today.getDate());
            const isToday = year === todayJ.jy && month === todayJ.jm && d === todayJ.jd;
            const key = formatDateKey(g);

            const $td = $(`<td>${d}</td>`);

            if (isPast) $td.addClass('disabled');
            if (isToday) $td.addClass('today');
            if (weekDay === 5 || weekDay === 6) $td.addClass('weekend');

            if (!isPast) {
                $td.on('click', function () {
                    $('td.selected').removeClass('selected');
                    $(this).addClass('selected');
                    selectedDateKey = key;
                    updateResult();
                });
            }

            row.append($td);

            if ((firstWeekday + d) % 7 === 0 || d === daysInMonth) {
                $body.append(row);
                row = $('<tr></tr>');
            }
        }
    }

    $year.on('change', () => generateCalendar(+$year.val(), +$month.val()));
    $month.on('change', () => generateCalendar(+$year.val(), +$month.val()));

    generateCalendar(+$year.val(), +$month.val());
});
